"use client";
import { useEffect, useMemo, useState } from "react";
import { getSupabaseBrowser } from "@/lib/supabase/browser";

type BMClass = { id: string; class_name: string; class_date: string; start_time: string; end_time: string; max_capacity: number; current_capacity: number };

export default function BreatheMovePage() {
  const supabase = useMemo(() => getSupabaseBrowser(), []);
  const [month, setMonth] = useState(() => new Date());
  const [classes, setClasses] = useState<BMClass[]>([]);
  const [enrollCount, setEnrollCount] = useState<Record<string, number>>({});
  const [mounted, setMounted] = useState(false);

  async function load() {
    const start = new Date(month.getFullYear(), month.getMonth(), 1);
    const end = new Date(month.getFullYear(), month.getMonth() + 1, 0);
    const { data } = await supabase
      .from("breathe_move_classes")
      .select("id,class_name,class_date,start_time,end_time,max_capacity,current_capacity")
      .gte("class_date", start.toISOString().slice(0, 10))
      .lte("class_date", end.toISOString().slice(0, 10));
    setClasses(data || []);

    const counts: Record<string, number> = {};
    for (const cls of data || []) {
      const { count } = await supabase
        .from("breathe_move_enrollments")
        .select("*", { count: "exact" })
        .eq("class_id", cls.id);
      counts[cls.id] = count || 0;
    }
    setEnrollCount(counts);
  }

  useEffect(() => {
    setMounted(true);
  }, []);

  useEffect(() => {
    if (mounted) {
      load();
    }
  }, [month, mounted]);

  const calendar = useMemo(() => {
    const weeks = [];
    const firstDay = new Date(month.getFullYear(), month.getMonth(), 1);
    const startDay = new Date(firstDay);
    startDay.setDate(firstDay.getDate() - firstDay.getDay());
    for (let w = 0; w < 6; w++) {
      const days = [];
      for (let d = 0; d < 7; d++) {
        const date = new Date(startDay);
        date.setDate(startDay.getDate() + w * 7 + d);
        days.push(date);
      }
      weeks.push(days);
    }
    return weeks;
  }, [month]);

  return (
    <div className="max-w-7xl mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">Breathe & Move Calendar</h1>
      <div className="flex justify-between items-center mb-4">
        <button onClick={() => setMonth(new Date(month.getFullYear(), month.getMonth() - 1, 1))} className="px-4 py-2 bg-brand-600 text-white rounded hover:bg-brand-700">Previous</button>
        <h2 className="text-xl font-semibold">
          {month.toLocaleString("default", { month: "long", year: "numeric" })}
        </h2>
        <button onClick={() => setMonth(new Date(month.getFullYear(), month.getMonth() + 1, 1))} className="px-4 py-2 bg-brand-600 text-white rounded hover:bg-brand-700">Next</button>
      </div>
      <div className="grid grid-cols-7 gap-2">
        {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map((d) => (
          <div key={d} className="text-center font-semibold p-2">{d}</div>
        ))}
        {calendar.flat().map((date, i) => {
          const dateStr = date.toISOString().slice(0, 10);
          const dateClasses = classes.filter((c) => c.class_date === dateStr);
          return (
            <div key={i} className={`border p-2 min-h-[100px] ${date.getMonth() !== month.getMonth() ? "bg-gray-100" : ""}`}>
              <div className="font-semibold">{date.getDate()}</div>
              {dateClasses.map((cls) => (
                <div key={cls.id} className="text-xs bg-brand-100 p-1 mt-1 rounded">
                  <div className="font-semibold">{cls.class_name}</div>
                  <div>{cls.start_time.slice(0, 5)} - {cls.end_time.slice(0, 5)}</div>
                  <div>{enrollCount[cls.id] || 0}/{cls.max_capacity}</div>
                </div>
              ))}
            </div>
          );
        })}
      </div>
    </div>
  );
}